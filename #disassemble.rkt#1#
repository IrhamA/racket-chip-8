#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 196 0 163 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 140 179 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 144 109 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 204 221 170 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 159 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 224 179 255 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 178 178 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 0 95 255 0 0 0 -1 -1
2 16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 118 0 255 0 0 0 -1
-1 2 48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1           0 1192 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"registers.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"ram.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"arch.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; (disassembler a b) Takes two bytes (a and b) and returns"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; the corresponding string relating to (connect a b)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; disassembler: Byte Byte -> Str"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"disassembler"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 7 #"connect"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"256"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00e0"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"CLS\""
0 0 24 3 2 #"] "
0 0 17 3 6 #"; 00e0"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00ee"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"RET\""
0 0 24 3 2 #"] "
0 0 17 3 6 #"; 00ee"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x0"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"SYS\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 5 #")) ] "
0 0 17 3 6 #"; 0nnn"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x1"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"JP\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0fff"
0 0 24 3 6 #")) )] "
0 0 17 3 7 #"; 1nnn "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x2"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"CALL\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0fff"
0 0 24 3 5 #")))] "
0 0 17 3 7 #"; 2nnn "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x3"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #"  "
0 0 19 3 4 #"\"SE\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00ff"
0 0 24 3 5 #")))] "
0 0 17 3 19 #"; 3xnn  SE Vx, byte"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x4"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #"  "
0 0 19 3 5 #"\"SNE\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00ff"
0 0 24 3 5 #")))] "
0 0 17 3 19 #"; 4xnn SNE Vx, byte"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x5"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x0"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"SE\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 6 #"; 5xy0"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x6"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"LD\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00ff"
0 0 24 3 5 #")))] "
0 0 17 3 19 #"; 6xnn  LD Vx, byte"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x7"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"LD\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00ff"
0 0 24 3 5 #")))] "
0 0 17 3 19 #"; 7xnn ADD Vx, byte"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x0"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 4 #")  ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"LD\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 16 #"; 8xy0 LD Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x1"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"OR\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 16 #"; 8xy1 OR Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x2"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"AND\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 17 #"; 8xy2 AND Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x3"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"XOR\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 17 #"; 8xy3 XOR Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x4"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"ADD\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 17 #"; 8xy4 ADD Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x5"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"SUB\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 17 #"; 8xy5 SUB Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x6"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"SHR\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 17 #"; 8xy6 SHR Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x7"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"SUBN\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 18 #"; 8xy7 SUBN Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x8"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xe"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"SHL\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 18 #"; 8xye SHL, Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-pnnq"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x9"
0 0 24 3 1 #" "
0 0 21 3 3 #"#x0"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"SNE\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 5 #")))] "
0 0 17 3 18 #"; 9xy0 SNE, Vx, Vy"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xa"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"LD\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 4 #"))] "
0 0 17 3 17 #"; annn LD I, addr"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xb"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"JP V0\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 4 #"))] "
0 0 17 3 18 #"; bnnn JP V0, addr"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xc"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"RND\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00ff"
0 0 24 3 5 #")))] "
0 0 17 3 19 #"; cxnn RND Vx, byte"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-mnnn"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xd"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"DRW\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x00f0"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0010"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x000f"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 6 #"))) ] "
0 0 17 3 25 #"; dxyn DRW Vx, Vy, nibble"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xe"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x9e"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"SKP\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 5 #")))] "
0 0 17 3 6 #"; ex9e"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xe"
0 0 24 3 1 #" "
0 0 21 3 4 #"#xa1"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"SKNP\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 5 #")))] "
0 0 17 3 6 #"; exa1"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x07"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"LD\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\"DT\""
0 0 24 3 3 #")] "
0 0 17 3 16 #"; fx07 LD Vx, DT"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x0a"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"LD\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"K\""
0 0 24 3 3 #")] "
0 0 17 3 15 #"; fx0a LD Vx, K"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x15"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"LD DT\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 5 #")))] "
0 0 17 3 16 #"; fx15 LD DT, Vx"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x18"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"LD ST\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 5 #")))] "
0 0 17 3 16 #"; fx18 LD ST, Vx"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x1e"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"ADD I\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 5 #")))] "
0 0 17 3 16 #"; fx1e ADD I, VX"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x29"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"LD F\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 5 #")))] "
0 0 17 3 15 #"; fx29 LD F, Vx"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x33"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"LD B\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 5 #")))] "
0 0 17 3 15 #"; fx33 LD B, Vx"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x55"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"LD [I]\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 5 #")))] "
0 0 17 3 17 #"; fx55 LD [I], Vx"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [(("
0 0 14 3 9 #"pred-sxtt"
0 0 24 3 1 #" "
0 0 21 3 3 #"#xf"
0 0 24 3 1 #" "
0 0 21 3 4 #"#x65"
0 0 24 3 2 #") "
0 0 14 3 7 #"connect"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"LD\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bitwise-and"
0 0 24 3 1 #" "
0 0 14 3 7 #"connect"
0 0 24 3 1 #" "
0 0 21 3 6 #"#x0f00"
0 0 24 3 2 #") "
0 0 21 3 6 #"#x0100"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"[I]\""
0 0 24 3 6 #")]))) "
0 0 17 3 17 #"; fx65 LD Vx, [I]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(4
 #";; (connect-d ram s e) takes ram, a starting point (s), and an endin"
 #"g"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";; point (e), it then returns a string with all elements from s to e"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; connect-d: Ram Nat Nat -> String"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"connect-d"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 12 #"disassembler"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 9 #"connect-d"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0           0
